<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Mario S.O</title><link>https://blog.mariodev.xyz/</link><description>Recent content in Blog on Mario S.O</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 24 Dec 2022 21:29:24 +0200</lastBuildDate><atom:link href="https://blog.mariodev.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding the Nuances of Harmful Behavior: Evil vs. Ignorance and Arrogance</title><link>https://blog.mariodev.xyz/evilness/</link><pubDate>Sat, 24 Dec 2022 21:29:24 +0200</pubDate><guid>https://blog.mariodev.xyz/evilness/</guid><description>When it comes to harm and suffering caused by others, it can be tempting to label certain individuals as &amp;ldquo;evil.&amp;rdquo; However, the concept of evil is often used as a catch-all term to describe anyone who causes harm, without necessarily understanding the motivations or thought processes behind their actions. In reality, there are many different factors that can contribute to harmful behavior, and it is important to consider these nuances when trying to understand and address negative actions.</description></item><item><title>IIFE Functions in JavaScript</title><link>https://blog.mariodev.xyz/iifefunctions/</link><pubDate>Mon, 01 Aug 2022 14:39:32 +0200</pubDate><guid>https://blog.mariodev.xyz/iifefunctions/</guid><description>IIFE - Immediately Invoked Function Expression (() =&amp;gt; { console.log(&amp;#39;Hello World&amp;#39;) })() IIFE functions look like that, they are wrapped between parentheses and at the end they are wrapped back again by two parentheses this time invoking the function.
Why would you use an IIFE? Reason 1: Async - Await (async () =&amp;gt; { await fetch(&amp;#39;https://mariodev.xyz&amp;#39;) })(); This kind of functions were used in the past to make the async - await work in node, but nowadays it is not necessary anymore because top-level await is supported in modern versions of node and most runtimes.</description></item><item><title>Tail recursion</title><link>https://blog.mariodev.xyz/tailrecursion/</link><pubDate>Sat, 30 Jul 2022 15:35:06 +0200</pubDate><guid>https://blog.mariodev.xyz/tailrecursion/</guid><description>What is tail recursion? We call tail recursion to a function which has its last instruction being a recursive call. They are recursive functions that can be used without the fear of suffering a stack overflow.
Examples Normal recursion ‚ùå def factorial (n): if n == 1: return 1 return n * factorial(n-1) This is an example of a normal recursion, because the last operation is not the recursive call, even though it seems that it is the last thing, in reality, the very last thing this code does is the multiplication.</description></item><item><title>Callback Vs. Promise functions in JavaScript</title><link>https://blog.mariodev.xyz/callbackvspromise/</link><pubDate>Thu, 21 Jul 2022 15:29:24 +0200</pubDate><guid>https://blog.mariodev.xyz/callbackvspromise/</guid><description>Differences between Callback and Promise functions in JavaScript const operation = (n1, n2, op) =&amp;gt; { return op(n1, n2) } operation (1, 2, (a, b) =&amp;gt; a + b) In this case we can see a Callback function being this, the function op which is then passed as a parameter to the operation function.
Nowadays is uncommon to use callbacks unless they are required by a library or maybe you could encounter one in wild west of legacy code.</description></item></channel></rss>