<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>audit on Mario S.O</title><link>https://blog.mariodev.xyz/tags/audit/</link><description>Recent content in audit on Mario S.O</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Apr 2023 09:57:24 -0400</lastBuildDate><atom:link href="https://blog.mariodev.xyz/tags/audit/index.xml" rel="self" type="application/rss+xml"/><item><title>Day05 - 3 attack vectors</title><link>https://blog.mariodev.xyz/day05/</link><pubDate>Wed, 12 Apr 2023 09:57:24 -0400</pubDate><guid>https://blog.mariodev.xyz/day05/</guid><description>Today I was lucky to get in time to an @opensensepw discord study session where @mis4nthr0pic was going through a couple of attack vectors in the Solidity-Security-Compendium
Signature Malleability This is quite a math heavy thing when you start looking into how it actually works and why, but for the context of an auditor it is enough to know a couple of things.
In Ethereum, the ecrecover function is used to verify signatures.</description></item><item><title>Day03 - Smart Contract Auditing Heuristics</title><link>https://blog.mariodev.xyz/day03/</link><pubDate>Mon, 10 Apr 2023 04:55:09 -0400</pubDate><guid>https://blog.mariodev.xyz/day03/</guid><description>I found this cool repo on Github that has a list of heuristics for auditing smart contracts. I thought it would be a good idea to go through the ones I found interesting.
Code asymmetries In many projects, there should be some symmetries for different functions.
For instance, a withdraw function should (usually) undo all the state changes of a deposit function and a delete function should undo all the state changes of the corresponding add function.</description></item><item><title>Day02 - People don't read standards</title><link>https://blog.mariodev.xyz/day02/</link><pubDate>Sun, 09 Apr 2023 05:49:23 -0400</pubDate><guid>https://blog.mariodev.xyz/day02/</guid><description>Today I went on and after doing some Ethernaut challenges, I decided to try and go through open challenges on Code4rena.
Prepared my environment, opened filter4rena, and started looking for some vulns.
First finding When starting to look at the contracts I quickly found this line of code that caught my attention:
ERC20(token).transfer(msg.sender, amount); Even though this was my first ever real audit, I have been reading a lot of blog posts and common vulnerabilities, so I knew that this line of code was considered a vulnerability because it doesn&amp;rsquo;t check the return value of the transfer function, and some tokens do not revert when the transfer fails but instead return false.</description></item></channel></rss>