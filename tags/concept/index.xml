<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>concept on Mario S.O</title><link>https://blog.mariodev.xyz/tags/concept/</link><description>Recent content in concept on Mario S.O</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Aug 2022 14:39:32 +0200</lastBuildDate><atom:link href="https://blog.mariodev.xyz/tags/concept/index.xml" rel="self" type="application/rss+xml"/><item><title>IIFE Functions in JavaScript</title><link>https://blog.mariodev.xyz/iifefunctions/</link><pubDate>Mon, 01 Aug 2022 14:39:32 +0200</pubDate><guid>https://blog.mariodev.xyz/iifefunctions/</guid><description>IIFE - Immediately Invoked Function Expression (() =&amp;gt; { console.log(&amp;#39;hola&amp;#39;) })() IIFE functions look like that, they are wrapped between parentheses and at the end they are wrapped back again by two parentheses this time invoking the function.
Why would you use an IIFE? Reason 1: Async - Await (async () =&amp;gt; { await fetch(&amp;#39;https://mariodev.xyz&amp;#39;) })(); This kind of functions were used in the past to make the async - await work in node, but nowadays it is not necessary anymore because top-level await is supported in modern versions of node and most runtimes.</description></item></channel></rss>