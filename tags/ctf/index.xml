<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CTF on Mario S.O</title><link>https://blog.mariodev.xyz/tags/ctf/</link><description>Recent content in CTF on Mario S.O</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 Apr 2023 11:13:25 -0400</lastBuildDate><atom:link href="https://blog.mariodev.xyz/tags/ctf/index.xml" rel="self" type="application/rss+xml"/><item><title>Day10 - Same bytecode, different results</title><link>https://blog.mariodev.xyz/day10/</link><pubDate>Mon, 17 Apr 2023 11:13:25 -0400</pubDate><guid>https://blog.mariodev.xyz/day10/</guid><description>Continuing with the EVM Through CTFs challenges, today I was able to solve a pretty interesting challenge.
The challenge In this case the challenge consisted on winning a game agains a bot smart contract (khabib) at the game 0xships.
The thing is that the bot khabib is quite a good player and his code is pretty complex, so trying to build your own bot was completely out of the equation.</description></item><item><title>Day08 - Going deeper into the EVM</title><link>https://blog.mariodev.xyz/day08/</link><pubDate>Sat, 15 Apr 2023 14:11:20 -0400</pubDate><guid>https://blog.mariodev.xyz/day08/</guid><description>As we were saying&amp;hellip; Today I went on and tried the EVM Through CTFs challenges and, oh god are they good.
Even though the first challenge is a bit of a warmup (especially if you read my previous post Day04 - Calldata &amp;amp; Foundry) it rapidly gets harder and harder, I&amp;rsquo;m actually stuck in the last part of challenge one, but I&amp;rsquo;ll get there.
Opcodes &amp;amp; Stack resources The first thing I did was to look at the EVM Opcodes and evm.</description></item><item><title>Day06 - VIP_Bank</title><link>https://blog.mariodev.xyz/day06/</link><pubDate>Thu, 13 Apr 2023 12:09:20 -0400</pubDate><guid>https://blog.mariodev.xyz/day06/</guid><description>Recently I discovered on Twitter this challenges page from Quill Audits, and I decided to give it a try.
I started with the VIPBank challenge, which is a smart contract that allows you to deposit and withdraw funds from it. The challenge consists on locking the contract, aka DoS attack.
The contract pragma solidity 0.8.7; contract VIP_Bank{ address public manager; mapping(address =&amp;gt; uint) public balances; mapping(address =&amp;gt; bool) public VIP; uint public maxETH = 0.</description></item></channel></rss>